pragma solidity ^0.8.0;
contract BankingSystem {
mapping(address => uint) public
balances;
address public owner;
constructor() {
owner = msg.sender;
}
function deposit() public payable {
balances[msg.sender] += msg.value;
}
function withdraw(uint amount) public {
require(balances[msg.sender] >=
amount, "Insufficient balance");
balances[msg.sender] -= amount;
payable(msg.sender).transfer(amount);
}
function transfer(address recipient, uint
amount) public {
require(balances[msg.sender] >=
amount, "Insufficient balance");
balances[msg.sender] -= amount;
balances[recipient] += amount;
}
function getBalance() public view returns
(uint) {
return balances[msg.sender];
}
function kill() public {
require(msg.sender == owner, "Only
owner can kill the contract");
selfdestruct(payable(owner));
}
}
